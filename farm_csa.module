<?php
/**
 * @file
 * Code for the Farm CSA module.
 */

include_once 'farm_csa.features.inc';

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function farm_csa_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {

  // Add a button for generating subscriptions.
  if ($form['#form_id'] == 'views_form_farm_csa_subscriptions_page_1' && $form_state['submitted'] != TRUE) {
    $form['select']['farm_csa_generate_subscriptions'] = array(
      '#type' => 'submit',
      '#value' => t('Generate Subscription(s)'),
      '#submit' => array('farm_csa_generate_subscriptions_submit'),
      '#weight' => -100,
    );
  }
}

/**
 * Submit function for generating CSA subscriptions.
 */
function farm_csa_generate_subscriptions_submit($form, &$form_state) {

  // Extract the order ID from the View arguments.
  if (!empty($form_state['build_info']['args'][0]->args[0])) {

    // Load the order.
    $order = commerce_order_load($form_state['build_info']['args'][0]->args[0]);

    // Iterate through the order's line items.
    if (!empty($order->commerce_line_items[LANGUAGE_NONE])) {
      foreach ($order->commerce_line_items[LANGUAGE_NONE] as $line_item) {

        // Load the line item.
        $line_item = commerce_line_item_load($line_item['line_item_id']);

        // Invoke the Rules component for generating subscriptions from a line item.
        $result = rules_invoke_component('rules_farm_csa_subscribe_from_line_item', $line_item);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function farm_csa_form_alter(&$form, &$form_state, $form_id) {

  // Alter the form for generating farm deliveries.
  if ($form_id == 'farm_delivery_generate_form') {

    // Add a checkbox for including active CSA subscriptions.
    $form['csa'] = array(
      '#type' => 'checkbox',
      '#title' => t('Include active CSA subscriptions'),
      '#description' => t('If this is checked, deliveries will also be added for all active CSA subcription orders. Note that the "Include orders since" date field above does not apply for these deliveries. All orders that include active CSA subscription products will be used.'),
      '#default_value' => TRUE,
      '#weight' => 10,
    );
  }
}

/**
 * Implements hook_farm_delivery_orders().
 */
function farm_csa_farm_delivery_orders($form_state) {

  // If the CSA checkbox wasn't checked, bail.
  if (empty($form_state['values']['csa'])) {
    return array();
  }

  // Start an empty delivery orders array.
  $delivery_orders = array();

  // Convert the delivery date to a unix timestamp.
  $delivery_date = strtotime($form_state['values']['date']);

  // Load active subscriptions.
  // Run an entity query that finds all subscription log entities
  // where the delivery date is between the subscription's start
  // and end dates.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'log')
    ->entityCondition('bundle', 'farm_csa_member_subscribe')
    ->fieldCondition('field_farm_date_range', 'value', $delivery_date, '<=')
    ->fieldCondition('field_farm_date_range', 'value2', $delivery_date, '>=')
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();
  if (isset($result['log'])) {
    $log_ids = array_keys($result['log']);
    $logs = entity_load('log', $log_ids);
  }

  // Generate lists of delivery items by order.
  if (!empty($logs)) {
    foreach ($logs as $log) {

      // If there is an order id...
      if (!empty($log->field_farm_csa_order[LANGUAGE_NONE][0]['target_id'])) {
        $order_id = $log->field_farm_csa_order[LANGUAGE_NONE][0]['target_id'];

        // Load the order.
        $order = commerce_order_load($order_id);
      }

      // If the order doesn't exist, skip the entire subscription.
      if (empty($order)) {
        continue;
      }

      // If the order is not "completed", skip it.
      if ($order->status != 'completed') {
        continue;
      }

      // Add the order to the list of delivery orders.
      $delivery_orders[$order->order_id] = $order->order_id;
    }
  }

  // Return the delivery orders.
  return $delivery_orders;
}
